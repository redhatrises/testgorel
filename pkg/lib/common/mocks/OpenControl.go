// Code generated by mockery v1.0.0. DO NOT EDIT.
package mocks

import common "github.com/opencontrol/compliance-masonry/pkg/lib/common"
import mock "github.com/stretchr/testify/mock"

// OpenControl is an autogenerated mock type for the OpenControl type
type OpenControl struct {
	mock.Mock
}

// GetCertifications provides a mock function with given fields:
func (_m *OpenControl) GetCertifications() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// GetCertificationsDependencies provides a mock function with given fields:
func (_m *OpenControl) GetCertificationsDependencies() []common.RemoteSource {
	ret := _m.Called()

	var r0 []common.RemoteSource
	if rf, ok := ret.Get(0).(func() []common.RemoteSource); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]common.RemoteSource)
		}
	}

	return r0
}

// GetComponents provides a mock function with given fields:
func (_m *OpenControl) GetComponents() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// GetComponentsDependencies provides a mock function with given fields:
func (_m *OpenControl) GetComponentsDependencies() []common.RemoteSource {
	ret := _m.Called()

	var r0 []common.RemoteSource
	if rf, ok := ret.Get(0).(func() []common.RemoteSource); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]common.RemoteSource)
		}
	}

	return r0
}

// GetStandards provides a mock function with given fields:
func (_m *OpenControl) GetStandards() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// GetStandardsDependencies provides a mock function with given fields:
func (_m *OpenControl) GetStandardsDependencies() []common.RemoteSource {
	ret := _m.Called()

	var r0 []common.RemoteSource
	if rf, ok := ret.Get(0).(func() []common.RemoteSource); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]common.RemoteSource)
		}
	}

	return r0
}
